// Note: This file is autogenerated. Do not edit it directly.
//
// Describes the contents of the test directory, which is a blueprint for
// files and directories. Tests can create a unique, safe environment for
// interacting with the contents of such a directory.
//
// Having strong typing for the test directory contents ensures that tests can
// be written with confidence that the files and directories they expect are
// actually found. Otherwise the tests are brittle and can break easily.

import * as z from "zod"

export const MyTestDirectorySchema = z.object({
  name: z.literal("test-environment/"),
  type: z.literal("directory"),
  contents: z.object({
    ".config": z.object({
      name: z.literal(".config/"),
      type: z.literal("directory"),
      contents: z.object({
        nvim: z.object({
          name: z.literal("nvim/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
            }),
            "prepare.lua": z.object({
              name: z.literal("prepare.lua"),
              type: z.literal("file"),
            }),
          }),
        }),
      }),
    }),
    "config-modifications": z.object({
      name: z.literal("config-modifications/"),
      type: z.literal("directory"),
      contents: z.object({
        "foo.lua": z.object({
          name: z.literal("foo.lua"),
          type: z.literal("file"),
        }),
      }),
    }),
    highlights: z.object({
      name: z.literal("highlights/"),
      type: z.literal("directory"),
      contents: z.object({
        "file_1.txt": z.object({
          name: z.literal("file_1.txt"),
          type: z.literal("file"),
        }),
        "file_2.txt": z.object({
          name: z.literal("file_2.txt"),
          type: z.literal("file"),
        }),
        "file_3.txt": z.object({
          name: z.literal("file_3.txt"),
          type: z.literal("file"),
        }),
      }),
    }),
    "initial-file.lua": z.object({
      name: z.literal("initial-file.lua"),
      type: z.literal("file"),
    }),
  }),
})

export const MyTestDirectoryContentsSchema =
  MyTestDirectorySchema.shape.contents
export type MyTestDirectoryContentsSchemaType = z.infer<
  typeof MyTestDirectorySchema
>

export type MyTestDirectory = MyTestDirectoryContentsSchemaType["contents"]

export const testDirectoryFiles = z.enum([
  ".config/nvim/init.lua",
  ".config/nvim/prepare.lua",
  ".config/nvim",
  ".config",
  "config-modifications/foo.lua",
  "config-modifications",
  "highlights/file_1.txt",
  "highlights/file_2.txt",
  "highlights/file_3.txt",
  "highlights",
  "initial-file.lua",
  ".",
])
export type MyTestDirectoryFile = z.infer<typeof testDirectoryFiles>
export type MyNeovimAppName = "nvim"
